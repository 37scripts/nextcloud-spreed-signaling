//*
// Standalone signaling server for the Nextcloud Spreed app.
// Copyright (C) 2022 struktur AG
//
// @author Joachim Bauch <bauch@struktur.de>
//
// @license GNU AGPL version 3 or any later version
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// source: grpc_mcu.proto

package signaling

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RpcMcu_GetPublisherId_FullMethodName = "/signaling.RpcMcu/GetPublisherId"
)

// RpcMcuClient is the client API for RpcMcu service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcMcuClient interface {
	GetPublisherId(ctx context.Context, in *GetPublisherIdRequest, opts ...grpc.CallOption) (*GetPublisherIdReply, error)
}

type rpcMcuClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcMcuClient(cc grpc.ClientConnInterface) RpcMcuClient {
	return &rpcMcuClient{cc}
}

func (c *rpcMcuClient) GetPublisherId(ctx context.Context, in *GetPublisherIdRequest, opts ...grpc.CallOption) (*GetPublisherIdReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublisherIdReply)
	err := c.cc.Invoke(ctx, RpcMcu_GetPublisherId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcMcuServer is the server API for RpcMcu service.
// All implementations must embed UnimplementedRpcMcuServer
// for forward compatibility
type RpcMcuServer interface {
	GetPublisherId(context.Context, *GetPublisherIdRequest) (*GetPublisherIdReply, error)
	mustEmbedUnimplementedRpcMcuServer()
}

// UnimplementedRpcMcuServer must be embedded to have forward compatible implementations.
type UnimplementedRpcMcuServer struct {
}

func (UnimplementedRpcMcuServer) GetPublisherId(context.Context, *GetPublisherIdRequest) (*GetPublisherIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublisherId not implemented")
}
func (UnimplementedRpcMcuServer) mustEmbedUnimplementedRpcMcuServer() {}

// UnsafeRpcMcuServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcMcuServer will
// result in compilation errors.
type UnsafeRpcMcuServer interface {
	mustEmbedUnimplementedRpcMcuServer()
}

func RegisterRpcMcuServer(s grpc.ServiceRegistrar, srv RpcMcuServer) {
	s.RegisterService(&RpcMcu_ServiceDesc, srv)
}

func _RpcMcu_GetPublisherId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublisherIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcMcuServer).GetPublisherId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RpcMcu_GetPublisherId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcMcuServer).GetPublisherId(ctx, req.(*GetPublisherIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcMcu_ServiceDesc is the grpc.ServiceDesc for RpcMcu service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcMcu_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "signaling.RpcMcu",
	HandlerType: (*RpcMcuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublisherId",
			Handler:    _RpcMcu_GetPublisherId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_mcu.proto",
}
